{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","userData","setUserdata","userName","useRef","useEffect","usersData","JSON","parse","localStorage","getItem","className","type","ref","placeholder","required","id","onClick","data","name","current","value","userPost","document","getElementById","setItem","stringify","map","index","src","width","height","e","newUserdata","splice","console","log","deleteBtn","editPost","prompt","oldUserData","editBtn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kKAsFeA,MAnFf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAETC,EAAWC,mBAiDf,OA/CAC,qBAAU,WACR,IAAIC,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,cAC5CJ,GACFJ,EAAYI,KAGb,IAyCI,sBAAKK,UAAU,UAAf,UAET,uBAAOA,UAAU,oBAAoBC,KAAK,OAAOC,IAAKV,EAAUW,YAAY,mBAAmBC,UAAQ,IACnG,uBAAOJ,UAAU,oBAAoBC,KAAK,OAAOI,GAAG,WAAWD,UAAQ,EAACD,YAAY,wBAEpF,wBAAQH,UAAU,qCAAqCM,QA5CzD,WACE,IAGIC,EAAO,CACTC,KAJShB,EAASiB,QAAQC,MAK1BC,SAJaC,SAASC,eAAe,YAAYH,OAOnDnB,EAAY,GAAD,mBAAKD,GAAL,CAAeiB,KAC1BT,aAAagB,QAAQ,YAAYlB,KAAKmB,UAAUzB,IAEhDE,EAASiB,QAAQC,MAAQ,GACzBE,SAASC,eAAe,YAAYH,MAAQ,IA+B5C,kBAKEpB,EAAS0B,KAAI,SAACN,EAAMO,GAClB,OAAO,gCAEL,qBAAIjB,UAAU,GAAd,UACE,qBAAKkB,IAAI,GAAGC,MAAM,GAAGC,OAAO,GAAIpB,UAAU,KAE3CU,EAAMF,QAEP,oBAAGR,UAAU,GAAb,UAAiBU,EAAMC,SAEzB,wBAAQX,UAAU,+BAA+BM,QAAS,SAACe,GAAD,OA1ChE,SAAmBJ,GACjB,IAAIK,EAAY,YAAIhC,GACpBgC,EAAYC,OAAON,EAAM,GACzB1B,EAAY+B,GAEZE,QAAQC,IAAI,2BAqCuDC,CAAUT,IAAzE,oBACA,wBAAQjB,UAAU,+BAA+BM,QAAS,SAACe,GAAD,OAlChE,SAAiBJ,GAEf,IAAIU,EAASC,OAAO,uBAChBC,EAAY,YAAIvC,GACpBuC,EAAYZ,GAAON,SAASgB,EAC5BpC,EAAYsC,GAEZL,QAAQC,IAAI,yBA2BuDK,CAAQb,IAAvE,qBAGE,qBAAKE,MAAM,GAAGD,IAAI,OAbHD,UCrDVc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAASC,eAAe,SAM1BkB,K","file":"static/js/main.e7f4c026.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './index.css'\n\nfunction App() {\n  const [userData, setUserdata] = useState([]);\n  var userName = useRef();\n\n  useEffect(() => {\n    var usersData = JSON.parse(localStorage.getItem('usersData'));\n    if (usersData) {\n      setUserdata(usersData)\n    }\n\n  }, [])\n\n  function createPost() {\n    var name = userName.current.value;\n    var userPost = document.getElementById('userPost').value;\n\n    var data = {\n      name: name,\n      userPost: userPost\n    }\n\n    setUserdata([...userData, data])\n    localStorage.setItem(\"usersData\",JSON.stringify(userData))\n    \n    userName.current.value = \"\";\n    document.getElementById('userPost').value = \"\";\n\n  }\n\n  function deleteBtn(index) {\n    var newUserdata=[...userData]\n    newUserdata.splice(index,1)\n    setUserdata(newUserdata)\n\n    console.log('delete post function==>');\n    \n  }\n\n  function editBtn(index) {\n\n    var editPost=prompt('Edit your post here')\n    var oldUserData=[...userData]\n    oldUserData[index].userPost=editPost\n    setUserdata(oldUserData)\n\n    console.log('edit post function==>');\n    \n  }\n\n\n\n  return <div className='mainDiv'  >\n\n<input className=\"ml-2 form-control\" type=\"text\" ref={userName} placeholder=\"Enter your name \" required />\n    <input className=\"ml-2 form-control\" type=\"text\" id=\"userPost\" required placeholder='share your thoughts' />\n\n    <button className=\"ml-2 mt-2 btn btn-outline-primaryl\" onClick={createPost}>Post</button>\n\n\n\n    {\n      userData.map((value,index)=>{\n        return <div key={index}>\n\n          <h1 className=''>\n            <img src=\"\" width='' height=''  className=''/>\n\n          {value.name}</h1>\n\n          <p className=\"\">{value.userPost}\n\n        <button className=\"ml-1 btn btn-outline-primary\" onClick={(e)=>deleteBtn(index)}>Delete</button>\n        <button className=\"ml-1 btn btn-outline-primary\" onClick={(e)=>editBtn(index)}>Edit</button>\n          </p>\n\n          <img width=\"\" src=\"\" />\n        </div>\n      })\n\n    }\n</div>\n      }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}